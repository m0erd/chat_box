About The Application



🚀 Real-Time Chat Application with Django – A Project in Scalable Backend Engineering
This project showcases a highly engineered real-time chat system built using Django, Django Channels, and PostgreSQL, emphasizing modern backend architecture, asynchronous communication, and robust security practices.

At its core, the application delivers a production-ready WebSocket infrastructure that allows users to create and join custom chat channels, exchange messages instantly, and securely authenticate via a JWT-based token system. Every layer of the application is crafted with scalability, maintainability, and extensibility in mind.

🧠 Core Engineering Highlights
⚙️ Scalable Architecture: Modular Django design, layered service structure, and reusable components ensure clean separation of concerns and future-proofing.

🔄 Asynchronous Real-Time Messaging: Leveraging Django Channels to implement full-duplex WebSocket communication, enabling high-performance, low-latency group messaging.

🔐 JWT-Based Authentication: Access and refresh token mechanism for secure, stateless authentication and session management.

🛡️ Centralized Error Handling: A custom global exception management system handles authentication failures, permission issues, validation errors, and connection timeouts, returning consistent and meaningful HTTP responses.

🧾 Persistent Chat Storage: PostgreSQL schema designed for structured message and metadata storage, ensuring message history and channel state tracking.

📡 WebSocket Security Layer: Includes token-based user verification and connection validation, providing end-to-end security across the real-time communication channel.

📊 Comprehensive Logging System: Structured logging with support for log levels, error tracing, and debug mode toggling, suitable for production diagnostics.

🐳 Deployment Ready: Includes Docker support for simplified local and cloud deployment with persistent volumes and environment-based configuration.



Tech Stack;
Django, RESTful API, PostgreSQL, Channels, Redis, Docker & React

Deployment;
Railway (previously AWS, I changed because of the costs)


Note: Message persistence was partially disabled to accommodate free-tier database limitations during deployment.


